simdat <-  simdat %>% left_join(simdatx, by = "id") %>%
mutate(grp = x,
x = if_else(t == 0, 0, x)) %>%
mutate(t = factor(t),
x = factor(x))
model.matrix( ~ 0 + t + t:x, data = simdat)
nsim <- 10
cbind.data.frame(simdat, rtsimmat) %>%
pivot_longer(`1`:`10`) %>%
filter(id %in% 1:10) %>%
ggplot(., aes(t, value, group = paste0(id, name))) + facet_wrap( ~ grp) + geom_line()
simulate_data <- function(
nsims = 50,
nsubj = 200,
beta = c(0, 2, 4, 6, 0, -3, -3, -3, 0, 3, 3, 3, 0, 0, 0, 0),
sigma_e = 3,
sigma_u = 1
) {
simdat <- expand_grid(id = 1:nsubj, t = 0:3, x = 0:3) %>%
mutate(
trt = x,
x = if_else(t == 0, 0L, x),
time = case_when(t == 0 ~ 0,
t == 1 ~ 4,
t == 2 ~ 8,
t == 3 ~ 12)) %>%
mutate(t = factor(t), x = factor(x)) %>%
unique()
rtsimmat <-matrix(NA, nrow(simdat), nsims)
colnames(rtsimmat) <- paste0("s", 1:nsims)
for(i in 1:nsims) {
rtsimmat[, i] <- simLMM(
~ 0 + t + t:x + (1 | id),
data = simdat,
Fixef = c(0, 2, 4, 6, 0, -3, -3, -3, 0, 3, 3, 3, 0, 0, 0, 0),
VC_sd = list(1, 3),
empirical = FALSE,
verbose = FALSE
)
}
return(bind_cols(simdat, as_tibble(rtsimmat)))
}
simulate_data_dt <- function(
nsims = 50,
nsubj = 200,
beta = c(0, 2, 4, 6, 0, -3, -3, -3, 0, 3, 3, 3, 0, 0, 0, 0),
sigma_e = 3,
sigma_u = 1
) {
simdat <- data.table::CJ(
id = 1:nsubj,
t = 0:3,
x = 0:3)[, .(
id,
trt = x,
x = factor(ifelse(t == 0, 0L, x)),
time = data.table::fcase(t == 0, 0, t == 1, 4, t == 2, 8, t == 3, 12),
t = factor(t)
)]
rtsimmat <-matrix(NA, nrow(simdat), nsims)
colnames(rtsimmat) <- paste0("s", 1:nsims)
for(i in 1:nsims) {
rtsimmat[, i] <- simLMM(
~ 0 + t + t:x + (1 | id),
data = simdat,
Fixef = c(0, 2, 4, 6, 0, -3, -3, -3, 0, 3, 3, 3, 0, 0, 0, 0),
VC_sd = list(1, 3),
empirical = FALSE,
verbose = FALSE
)
}
return(cbind(simdat, rtsimmat))
}
N <- 100
res <- simulate_data_dt()
x <- findInterval(runif(N), c(0, 0.25, 0.5, 0.75)) - 1
simdatx <- data.table::data.table(id = 1:N, trt = x)
ex <- res[simdatx, on = .(id, trt)]
ex <- left_join(simdatx, res, by = c("id", "trt"))
ggplot(ex, aes(t, s2, group = id)) + facet_wrap( ~ trt) + geom_line()
fit_vb <- vb_lmm_randint(
model.matrix( ~ t + t:x, data = ex)[, -c(5, 9, 13)],
model.matrix( ~ 0 + factor(id), data = ex)[,],
ex[, s1],
mu_beta = rep(0, 13),
sigma_beta = diag(c(10^2, rep(1, 12))),
mu = rep(0, N + 13),
sigma = diag(1, N + 13),
Aeps = 1e-2, Beps = 1e-2, Au = 1e-2, Bu = 1e-2
)
fit_lmer <- lme4::lmer(s1 ~ t + t:x + (1 | id), data = ex)
fit_brms <- brm(
s1 ~ t + t:x + (1 | id),
data = ex,
prior = c(prior(normal(0, 1), class = "b"), prior(normal(0, 10), class = "Intercept")), iter = 5000, chains = 4)
plot(as.data.frame(cbind(lmer = fixef(fit_lmer), brms = fixef(fit_brms)[-c(5,9,13), 1], mfvb = fit_vb$mu[1:13, 1])))
plot(cbind(lmer = ranef(fit_lmer)$id, brms = ranef(fit_brms)$id[, 1, 1], mfvb = fit_vb$mu[14:213, 1]))
plot(cbind(brms = diag(vcov(fit_brms))[-c(5,9,13)], mfvb = diag(fit_vb$sigma[1:13, 1:13]))); abline(0, 1)
par(mfrow = c(4, 4), mar = c(4,3,1,1))
for(j in 1:13) {
hist(as.matrix(fit_brms, "b")[, -c(5, 9, 13)][, j], freq = F, breaks = 50, main = "", xlab = bquote(beta[.(j)]))
curve(dnorm(x, fit_vb$mu[j, 1], sqrt(fit_vb$sigma[j, j])), add = T)
}
make_design()
make_design <- function(zero_sum = FALSE) {
Xt  <- kronecker(diag(1, 3), rep(1, 4))
Xxt <- diag(1, 12)
# Constrain to be equal at baseline and sum to zero at each post-randomisation time point
if(zero_sum) {
XC  <- cbind(1, rbind(0, cbind(Xt, kronecker(diag(1, 3), eigen(diag(1, 4) - 1/4)$vectors[, 1:3]))))
} else {
XC  <- cbind(1, rbind(0, cbind(Xt, diag(1, 12))))
}
colnames(XC) <- c("t0", "t1", "t2", "t3", "t1x1", "t1x2", "t1x3", "t2x1", "t2x2", "t2x3", "t3x1", "t3x2", "t3x3")
rownames(XC) <- c("t0", "t1x0", "t1x1", "t1x2", "t1x3", "t2x0", "t2x1", "t2x2", "t2x3", "t3x0", "t3x1", "t3x2", "t3x3")
return(XC)
}
make_design()
Xt  <- kronecker(diag(1, 3), rep(1, 4))
Xxt <- diag(1, 12)
Xxt
XC  <- cbind(1, rbind(0, cbind(Xt, Xxt)))
Xc
XC
colnames(XC) <- c("t0", "t1", "t2", "t3", "t1x1", "t1x2", "t1x3", "t2x1", "t2x2", "t2x3", "t3x1", "t3x2", "t3x3")
rownames(XC) <- c("t0", "t1x0", "t1x1", "t1x2", "t1x3", "t2x0", "t2x1", "t2x2", "t2x3", "t3x0", "t3x1", "t3x2", "t3x3")
XC
kronecker(diag(1, 3), eigen(diag(1, 4) - 1/4)$vectors[, 1:3])
eigen(diag(1, 4) - 1/4)$vectors[, 1:3]
contr.treatment(4)
make_design <- function(zero_sum = FALSE) {
Xt  <- kronecker(diag(1, 3), rep(1, 4))
Xxt <- diag(1, 12)
# Constrain to be equal at baseline and sum to zero at each post-randomisation time point
if(zero_sum) {
C <- eigen(diag(1, 4) - 1/4)$vectors[, 1:3]
} else {
C <- contr.treatment(4)
}
XC  <- cbind(1, rbind(0, cbind(Xt, kronecker(diag(1, 3), C))))
colnames(XC) <- c("t0", "t1", "t2", "t3", "t1x1", "t1x2", "t1x3", "t2x1", "t2x2", "t2x3", "t3x1", "t3x2", "t3x3")
rownames(XC) <- c("t0", "t1x0", "t1x1", "t1x2", "t1x3", "t2x0", "t2x1", "t2x2", "t2x3", "t3x0", "t3x1", "t3x2", "t3x3")
return(XC)
}
make_design()
make_design(T)
make_design()
p <- rep(0.25,4)
x <- sample.int(length(p), 1, prob = p)
x
X
rownames(X)
X <- make_design()
X
rownames(X)
grepl(paste0("x", x), rownames(X))
c(TRUE, grepl(paste0("x", x), rownames(X))[-1])
X[c(TRUE, grepl(paste0("x", x), rownames(X))[-1]), ]
X_j <- X[c(TRUE, grepl(paste0("x", x), rownames(X))[-1]), ]
X_j
sim_subject_data <- function(X, p, beta, sigma_e, sigma_u) {
x <- sample.int(length(p), 1, prob = p)
X_j <- X[c(TRUE, grepl(paste0("x", x), rownames(X))[-1]), ]
b_j <- rnorm(1, 0, sigma_u)
y_j <- b_j + X_j %*% beta + rnorm(nrow(X_j), 0, sigma_e)
data.table(x = x, b = b_j, y = y_j)
}
sim_subject_data(X, rep(0.25, 4), rep(0, 13), 3, 1)
x <- sample.int(length(p), 1, prob = p)
X_j <- X[c(TRUE, grepl(paste0("x", x), rownames(X))[-1]), ]
sigma_u <- 1
b_j <- rnorm(1, 0, sigma_u)
rnorm(nrow(X_j), 0, sigma_e)
sigma_e <- 3
rnorm(nrow(X_j), 0, sigma_e)
X_j %*% beta
beta <- rep(0, 13)
X_j %*% beta
y_j <- b_j + drop(X_j %*% beta) + rnorm(nrow(X_j), 0, sigma_e)
data.table(x = x, b = b_j, y = y_j)
sim_subject_data <- function(X, p, beta, sigma_e, sigma_u) {
x <- sample.int(length(p), 1, prob = p)
X_j <- X[c(TRUE, grepl(paste0("x", x), rownames(X))[-1]), ]
b_j <- rnorm(1, 0, sigma_u)
y_j <- b_j + drop(X_j %*% beta) + rnorm(nrow(X_j), 0, sigma_e)
data.table::data.table(x = x, b = b_j, y = y_j)
}
sim_subject_data(X, rep(0.25, 4), rep(0, 13), 3, 1)
sim_subject_data <- function(X, p, beta, sigma_e, sigma_u) {
x <- sample.int(length(p), 1, prob = p) - 1
X_j <- X[c(TRUE, grepl(paste0("x", x), rownames(X))[-1]), ]
b_j <- rnorm(1, 0, sigma_u)
y_j <- b_j + drop(X_j %*% beta) + rnorm(nrow(X_j), 0, sigma_e)
data.table::data.table(x = x, b = b_j, y = y_j)
}
sim_subject_data(X, rep(0.25, 4), rep(0, 13), 3, 1)
system.time(
fit_vb <- vb_lmm_randint(
model.matrix( ~ t + t:x, data = ex)[, -c(5, 9, 13)],
model.matrix( ~ 0 + factor(id), data = ex)[,],
ex[, s1],
mu_beta = rep(0, 13),
sigma_beta = diag(c(10^2, rep(1, 12))),
mu = rep(0, N + 13),
sigma = diag(1, N + 13),
Aeps = 1e-2, Beps = 1e-2, Au = 1e-2, Bu = 1e-2
)
system.time(
fit_vb <- vb_lmm_randint(
model.matrix( ~ t + t:x, data = ex)[, -c(5, 9, 13)],
model.matrix( ~ 0 + factor(id), data = ex)[,],
ex[, s1],
mu_beta = rep(0, 13),
sigma_beta = diag(c(10^2, rep(1, 12))),
mu = rep(0, N + 13),
sigma = diag(1, N + 13),
Aeps = 1e-2, Beps = 1e-2, Au = 1e-2, Bu = 1e-2
)
0.1*5
0.1*5*1e4/60
0.1*5*1e3/60
fit_vb
library(designr)
library(varapproxr)
library(lme4)
library(brms)
make_design <- function(zero_sum = FALSE) {
Xt  <- kronecker(diag(1, 3), rep(1, 4))
Xxt <- diag(1, 12)
# Constrain to be equal at baseline and sum to zero at each post-randomisation time point
if(zero_sum) {
C <- eigen(diag(1, 4) - 1/4)$vectors[, 1:3]
} else {
C <- contr.treatment(4)
}
XC  <- cbind(1, rbind(0, cbind(Xt, kronecker(diag(1, 3), C))))
colnames(XC) <- c("t0", "t1", "t2", "t3", "t1x1", "t1x2", "t1x3", "t2x1", "t2x2", "t2x3", "t3x1", "t3x2", "t3x3")
rownames(XC) <- c("t0", "t1x0", "t1x1", "t1x2", "t1x3", "t2x0", "t2x1", "t2x2", "t2x3", "t3x0", "t3x1", "t3x2", "t3x3")
return(XC)
}
x <- factor(0:3)
t <- factor(1:3)
D <- expand.grid(x = x, t = t)
D <- rbind.data.frame(data.frame(x = 0, t = 0), D)
X <- model.matrix( ~ t + t:x, data = D)
simdat <- tidyr::expand_grid(id = 1:200, D)
create_subjects <- function(nsubj) {
subjects <- data.table(
id = 1:nsubj,
rt = 1:nsubj
)
return(subjects)
}
sim_subject_data <- function(X, p, beta, sigma_e, sigma_u) {
x <- sample.int(length(p), 1, prob = p) - 1
X_j <- X[c(TRUE, grepl(paste0("x", x), rownames(X))[-1]), ]
b_j <- rnorm(1, 0, sigma_u)
y_j <- b_j + drop(X_j %*% beta) + rnorm(nrow(X_j), 0, sigma_e)
data.table::data.table(x = x, b = b_j, y = y_j)
}
simdat <-  simdat %>% left_join(simdatx, by = "id") %>%
mutate(grp = x,
x = if_else(t == 0, 0, x)) %>%
mutate(t = factor(t),
x = factor(x))
model.matrix( ~ 0 + t + t:x, data = simdat)
nsim <- 10
cbind.data.frame(simdat, rtsimmat) %>%
pivot_longer(`1`:`10`) %>%
filter(id %in% 1:10) %>%
ggplot(., aes(t, value, group = paste0(id, name))) + facet_wrap( ~ grp) + geom_line()
simulate_data <- function(
nsims = 50,
nsubj = 200,
beta = c(0, 2, 4, 6, 0, -3, -3, -3, 0, 3, 3, 3, 0, 0, 0, 0),
sigma_e = 3,
sigma_u = 1
) {
simdat <- expand_grid(id = 1:nsubj, t = 0:3, x = 0:3) %>%
mutate(
trt = x,
x = if_else(t == 0, 0L, x),
time = case_when(t == 0 ~ 0,
t == 1 ~ 4,
t == 2 ~ 8,
t == 3 ~ 12)) %>%
mutate(t = factor(t), x = factor(x)) %>%
unique()
rtsimmat <-matrix(NA, nrow(simdat), nsims)
colnames(rtsimmat) <- paste0("s", 1:nsims)
for(i in 1:nsims) {
rtsimmat[, i] <- simLMM(
~ 0 + t + t:x + (1 | id),
data = simdat,
Fixef = c(0, 2, 4, 6, 0, -3, -3, -3, 0, 3, 3, 3, 0, 0, 0, 0),
VC_sd = list(1, 3),
empirical = FALSE,
verbose = FALSE
)
}
return(bind_cols(simdat, as_tibble(rtsimmat)))
}
simulate_data_dt <- function(
nsims = 50,
nsubj = 200,
beta = c(0, 2, 4, 6, 0, -3, -3, -3, 0, 3, 3, 3, 0, 0, 0, 0),
sigma_e = 3,
sigma_u = 1
) {
simdat <- data.table::CJ(
id = 1:nsubj,
t = 0:3,
x = 0:3)[, .(
id,
trt = x,
x = factor(ifelse(t == 0, 0L, x)),
time = data.table::fcase(t == 0, 0, t == 1, 4, t == 2, 8, t == 3, 12),
t = factor(t)
)]
rtsimmat <-matrix(NA, nrow(simdat), nsims)
colnames(rtsimmat) <- paste0("s", 1:nsims)
for(i in 1:nsims) {
rtsimmat[, i] <- simLMM(
~ 0 + t + t:x + (1 | id),
data = simdat,
Fixef = c(0, 2, 4, 6, 0, -3, -3, -3, 0, 3, 3, 3, 0, 0, 0, 0),
VC_sd = list(1, 3),
empirical = FALSE,
verbose = FALSE
)
}
return(cbind(simdat, rtsimmat))
}
N <- 100
res <- simulate_data_dt()
x <- findInterval(runif(N), c(0, 0.25, 0.5, 0.75)) - 1
simdatx <- data.table::data.table(id = 1:N, trt = x)
ex <- res[simdatx, on = .(id, trt)]
ex <- left_join(simdatx, res, by = c("id", "trt"))
ggplot(ex, aes(t, s2, group = id)) + facet_wrap( ~ trt) + geom_line()
system.time(
fit_vb <- vb_lmm_randint(
model.matrix( ~ t + t:x, data = ex)[, -c(5, 9, 13)],
model.matrix( ~ 0 + factor(id), data = ex)[,],
ex[, s1],
mu_beta = rep(0, 13),
sigma_beta = diag(c(10^2, rep(1, 12))),
mu = rep(0, N + 13),
sigma = diag(1, N + 13),
Aeps = 1e-2, Beps = 1e-2, Au = 1e-2, Bu = 1e-2
)
library(designr)
library(varapproxr)
library(lme4)
library(brms)
make_design <- function(zero_sum = FALSE) {
Xt  <- kronecker(diag(1, 3), rep(1, 4))
Xxt <- diag(1, 12)
# Constrain to be equal at baseline and sum to zero at each post-randomisation time point
if(zero_sum) {
C <- eigen(diag(1, 4) - 1/4)$vectors[, 1:3]
} else {
C <- contr.treatment(4)
}
XC  <- cbind(1, rbind(0, cbind(Xt, kronecker(diag(1, 3), C))))
colnames(XC) <- c("t0", "t1", "t2", "t3", "t1x1", "t1x2", "t1x3", "t2x1", "t2x2", "t2x3", "t3x1", "t3x2", "t3x3")
rownames(XC) <- c("t0", "t1x0", "t1x1", "t1x2", "t1x3", "t2x0", "t2x1", "t2x2", "t2x3", "t3x0", "t3x1", "t3x2", "t3x3")
return(XC)
}
x <- factor(0:3)
t <- factor(1:3)
D <- expand.grid(x = x, t = t)
D <- rbind.data.frame(data.frame(x = 0, t = 0), D)
X <- model.matrix( ~ t + t:x, data = D)
simdat <- tidyr::expand_grid(id = 1:200, D)
create_subjects <- function(nsubj) {
subjects <- data.table(
id = 1:nsubj,
rt = 1:nsubj
)
return(subjects)
}
sim_subject_data <- function(X, p, beta, sigma_e, sigma_u) {
x <- sample.int(length(p), 1, prob = p) - 1
X_j <- X[c(TRUE, grepl(paste0("x", x), rownames(X))[-1]), ]
b_j <- rnorm(1, 0, sigma_u)
y_j <- b_j + drop(X_j %*% beta) + rnorm(nrow(X_j), 0, sigma_e)
data.table::data.table(x = x, b = b_j, y = y_j)
}
simdat <-  simdat %>% left_join(simdatx, by = "id") %>%
mutate(grp = x,
x = if_else(t == 0, 0, x)) %>%
mutate(t = factor(t),
x = factor(x))
model.matrix( ~ 0 + t + t:x, data = simdat)
nsim <- 10
cbind.data.frame(simdat, rtsimmat) %>%
pivot_longer(`1`:`10`) %>%
filter(id %in% 1:10) %>%
ggplot(., aes(t, value, group = paste0(id, name))) + facet_wrap( ~ grp) + geom_line()
simulate_data <- function(
nsims = 50,
nsubj = 200,
beta = c(0, 2, 4, 6, 0, -3, -3, -3, 0, 3, 3, 3, 0, 0, 0, 0),
sigma_e = 3,
sigma_u = 1
) {
simdat <- expand_grid(id = 1:nsubj, t = 0:3, x = 0:3) %>%
mutate(
trt = x,
x = if_else(t == 0, 0L, x),
time = case_when(t == 0 ~ 0,
t == 1 ~ 4,
t == 2 ~ 8,
t == 3 ~ 12)) %>%
mutate(t = factor(t), x = factor(x)) %>%
unique()
rtsimmat <-matrix(NA, nrow(simdat), nsims)
colnames(rtsimmat) <- paste0("s", 1:nsims)
for(i in 1:nsims) {
rtsimmat[, i] <- simLMM(
~ 0 + t + t:x + (1 | id),
data = simdat,
Fixef = c(0, 2, 4, 6, 0, -3, -3, -3, 0, 3, 3, 3, 0, 0, 0, 0),
VC_sd = list(1, 3),
empirical = FALSE,
verbose = FALSE
)
}
return(bind_cols(simdat, as_tibble(rtsimmat)))
}
simulate_data_dt <- function(
nsims = 50,
nsubj = 200,
beta = c(0, 2, 4, 6, 0, -3, -3, -3, 0, 3, 3, 3, 0, 0, 0, 0),
sigma_e = 3,
sigma_u = 1
) {
simdat <- data.table::CJ(
id = 1:nsubj,
t = 0:3,
x = 0:3)[, .(
id,
trt = x,
x = factor(ifelse(t == 0, 0L, x)),
time = data.table::fcase(t == 0, 0, t == 1, 4, t == 2, 8, t == 3, 12),
t = factor(t)
)]
rtsimmat <-matrix(NA, nrow(simdat), nsims)
colnames(rtsimmat) <- paste0("s", 1:nsims)
for(i in 1:nsims) {
rtsimmat[, i] <- simLMM(
~ 0 + t + t:x + (1 | id),
data = simdat,
Fixef = c(0, 2, 4, 6, 0, -3, -3, -3, 0, 3, 3, 3, 0, 0, 0, 0),
VC_sd = list(1, 3),
empirical = FALSE,
verbose = FALSE
)
}
return(cbind(simdat, rtsimmat))
}
N <- 100
res <- simulate_data_dt()
x <- findInterval(runif(N), c(0, 0.25, 0.5, 0.75)) - 1
simdatx <- data.table::data.table(id = 1:N, trt = x)
ex <- res[simdatx, on = .(id, trt)]
system.time(
fit_vb <- vb_lmm_randint(
model.matrix( ~ t + t:x, data = ex)[, -c(5, 9, 13)],
model.matrix( ~ 0 + factor(id), data = ex)[,],
ex[, s1],
mu_beta = rep(0, 13),
sigma_beta = diag(c(10^2, rep(1, 12))),
mu = rep(0, N + 13),
sigma = diag(1, N + 13),
Aeps = 1e-2, Beps = 1e-2, Au = 1e-2, Bu = 1e-2
)
system.time(
fit_vb <- vb_lmm_randint(
model.matrix( ~ t + t:x, data = ex)[, -c(5, 9, 13)],
model.matrix( ~ 0 + factor(id), data = ex)[,],
ex[, s1],
mu_beta = rep(0, 13),
sigma_beta = diag(c(10^2, rep(1, 12))),
mu = rep(0, N + 13),
sigma = diag(1, N + 13),
Aeps = 1e-2, Beps = 1e-2, Au = 1e-2, Bu = 1e-2
)
fit_lmer <- lme4::lmer(s1 ~ t + t:x + (1 | id), data = ex)
system.time(
fit_vb <- vb_lmm_randint(
model.matrix( ~ t + t:x, data = ex)[, -c(5, 9, 13)],
model.matrix( ~ 0 + factor(id), data = ex)[,],
ex[, s1],
mu_beta = rep(0, 13),
sigma_beta = diag(c(10^2, rep(1, 12))),
mu = rep(0, N + 13),
sigma = diag(1, N + 13),
Aeps = 1e-2, Beps = 1e-2, Au = 1e-2, Bu = 1e-2
)
system.time(
fit_vb <- vb_lmm_randint(
model.matrix( ~ t + t:x, data = ex)[, -c(5, 9, 13)],
model.matrix( ~ 0 + factor(id), data = ex)[,],
ex[, s1],
mu_beta = rep(0, 13),
sigma_beta = diag(c(10^2, rep(1, 12))),
mu = rep(0, N + 13),
sigma = diag(1, N + 13),
Aeps = 1e-2, Beps = 1e-2, Au = 1e-2, Bu = 1e-2
)
